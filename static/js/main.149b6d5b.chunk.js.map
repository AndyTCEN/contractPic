{"version":3,"sources":["components/App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","_super","call","state","account","_callee","regenerator_default","a","wrap","_context","prev","next","loadWeb3","stop","_callee2","_context2","window","ethereum","web3","Web3","currentProvider","alert","_callee3","_context3","eth","getAccounts","sent","setState","t0","console","log","_callee4","accounts","nft","_context4","Contract","Nft","abi","address","methods","mintNicMeta","send","from","value","utils","toWei","_this2","react_default","createElement","className","onClick","event","preventDefault","connect","mint","Component","Boolean","location","hostname","match","ReactDOM","render","components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"y+PAsGeA,0CA3Bd,SAAAA,EAAYC,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IAChBE,EAAAI,EAAAC,KAAAF,KAAMJ,IACDO,MAAM,CACTC,QAAQ,OAHMP,8FA3DjB,SAAAQ,IAAA,OAAAC,EAAAC,EAAAC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACQX,KAAKY,WADb,wBAAAH,EAAAI,SAAAR,EAAAL,2HAMF,SAAAc,IAAA,OAAAR,EAAAC,EAAAC,KAAA,SAAAO,GAAA,cAAAA,EAAAL,KAAAK,EAAAJ,MAAA,OACKK,OAAOC,SACRD,OAAOE,KAAK,IAAIC,IAAKH,OAAOC,UAErBD,OAAOE,KACdF,OAAOE,KAAO,IAAIC,IAAKH,OAAOE,KAAKE,iBAGnCJ,OAAOK,MAAM,gEARjB,wBAAAN,EAAAF,SAAAC,uHAaE,SAAAQ,IAAA,IAAAJ,EAAAd,EAAA,OAAAE,EAAAC,EAAAC,KAAA,SAAAe,GAAA,cAAAA,EAAAb,KAAAa,EAAAZ,MAAA,cAAAY,EAAAb,KAAA,EAEUQ,EAAKF,OAAOE,KAFtBK,EAAAZ,KAAA,EAGwBO,EAAKM,IAAIC,cAHjC,OAGUrB,EAHVmB,EAAAG,KAII1B,KAAK2B,SAAS,CAACvB,QAAQA,IAJ3BmB,EAAAZ,KAAA,gBAAAY,EAAAb,KAAA,EAAAa,EAAAK,GAAAL,EAAA,SAMIM,QAAQC,IAARP,EAAAK,IANJ,yBAAAL,EAAAV,SAAAS,EAAAtB,KAAA,0HAUD,SAAA+B,IAAA,IAAAb,EAAAc,EAAAC,EAAA,OAAA3B,EAAAC,EAAAC,KAAA,SAAA0B,GAAA,cAAAA,EAAAxB,KAAAwB,EAAAvB,MAAA,cAESO,EAAKF,OAAOE,KAFrBgB,EAAAvB,KAAA,EAG0BO,EAAKM,IAAIC,cAHnC,cAGSO,EAHTE,EAAAR,KAISO,EAAI,IAAIf,EAAKM,IAAIW,SAASC,EAAIC,IAAID,EAAIE,SAJ/CJ,EAAAvB,KAAA,EAMSsB,EAAIM,QAAQC,YAAY,GAAGC,KAAK,CACpCC,KAAMV,EAAS,GACfW,MAAOzB,EAAK0B,MAAMC,MAAM,OAAQ,WARrC,wBAAAX,EAAArB,SAAAkB,gFAqCD,WAAQ,IAAAe,EAAA9C,KACN,OACE+C,EAAAxC,EAAAyC,cAAA,OAAKC,UAAU,OACZF,EAAAxC,EAAAyC,cAAA,yBAAiBhD,KAAKG,MAAMC,SAE5B2C,EAAAxC,EAAAyC,cAAA,UACAE,QAAS,SAACC,GACVA,EAAMC,iBACNN,EAAKO,YAHL,uBAMAN,EAAAxC,EAAAyC,cAAA,UAAQE,QAAS,SAACC,GAEjBA,EAAMC,iBACNN,EAAKQ,SAHN,gBArFWC,aCIEC,QACW,cAA7BxC,OAAOyC,SAASC,UAEe,UAA7B1C,OAAOyC,SAASC,UAEhB1C,OAAOyC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOd,EAAAxC,EAAAyC,cAACc,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.149b6d5b.chunk.js","sourcesContent":["// src/App.js\nimport React, { Component } from 'react'\nimport { InjectedConnector } from '@web3-react/injected-connector'\nimport { useWeb3React } from \"@web3-react/core\"\nimport Nft from '../truffle_abis/Nft.json';\nimport Web3 from 'web3'\n\n\nclass App extends Component{\n// const App = () => {\n  // const injected = new InjectedConnector({\n  //   supportedChainIds: [1, 3, 4, 5, 42],\n  // })\n\n  // const { account, activate } = useWeb3React()\n\n  async componentWillMount() {\n    await this.loadWeb3()\n  }\n\n\n\nasync loadWeb3(){\n  if(window.ethereum){\n    window.web3=new Web3(window.ethereum)\n  }\n  else if (window.web3) {\n    window.web3 = new Web3(window.web3.currentProvider)\n  }\n  else {\n    window.alert('Non ethereum browser detected. You should consider Metamask!')\n  }\n}\n\n\n  async connect() {\n    try {\n      const web3=window.web3;\n      const account=await web3.eth.getAccounts();\n      this.setState({account:account});\n    } catch (ex) {\n      console.log(ex)\n    }\n  }\n\n async mint() {\n    // const accounts = await web3.eth.getAccounts();\n    const web3=window.web3;\n    const accounts = await web3.eth.getAccounts();\n    const nft=new web3.eth.Contract(Nft.abi,Nft.address)\n\n    await nft.methods.mintNicMeta(1).send({\n      from: accounts[0],\n      value: web3.utils.toWei(\"0.04\", 'ether'),\n    });\n\n    // const params={\n    //   from:accounts[0],\n    //   to:Nft.address,\n    //   value:1,\n    //   'data':nft.methods.mintNicMeta(1).encodeABI()\n    // }\n    // const send=web3.eth.sendTransaction(params);\n  //  const ts=await nft.methods.flipSaleActive().send({\n  //    from:accounts[0]}\n  //  );\n  //  console.log(ts.toString());\n\n    // await nft.methods.mintNicMeta(1).send({\n    //   from: accounts[0],\n    //   value: web3.utils.toWei(\"0.04\", 'ether'),\n    // });\n\n  }\n\n constructor(props){\n   super(props)\n   this.state={\n     account:'0x0',\n   }\n }\n  \nrender(){\n  return (\n    <div className=\"App\">\n       <p>ETH Address: {this.state.account}</p>\n\n       <button \n       onClick={(event)=>{\n       event.preventDefault()\n       this.connect();     \n       \n       }} >Connect to MetaMask</button>\n       <button onClick={(event)=>\n        {\n        event.preventDefault();        \n        this.mint()}\n        } >Mint</button>\n    </div>\n  );\n}\n}\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css'\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}